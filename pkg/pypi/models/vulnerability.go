package models

import "time"

// Vulnerability 表示一个包的安全漏洞信息
// PyPI的JSON API中漏洞信息的结构
type Vulnerability struct {
	// ID 漏洞唯一标识符
	ID string `json:"id"`

	// Aliases 漏洞的其他标识符列表，如CVE编号
	Aliases []string `json:"aliases"`

	// Summary 漏洞摘要描述
	Summary string `json:"summary"`

	// Details 漏洞详细描述
	Details string `json:"details"`

	// FixedIn 已修复此漏洞的版本列表
	FixedIn []string `json:"fixed_in"`

	// Source 漏洞信息来源
	Source string `json:"source"`

	// Link 漏洞详情URL
	Link string `json:"link"`

	// Withdrawn 漏洞撤回时间
	// 如果不为null，表示此漏洞报告已被撤回
	Withdrawn string `json:"withdrawn"`
}

// IsFixed 检查指定版本是否已修复了此漏洞
// 此方法仅进行字符串比较，不执行语义版本比较
func (v *Vulnerability) IsFixed(version string) bool {
	for _, fixedVersion := range v.FixedIn {
		if fixedVersion == version {
			return true
		}
	}
	return false
}

// IsWithdrawn 检查漏洞报告是否已被撤回
func (v *Vulnerability) IsWithdrawn() bool {
	return v.Withdrawn != ""
}

// GetWithdrawnTime 解析漏洞撤回时间
// 如果漏洞未撤回，返回零值时间
func (v *Vulnerability) GetWithdrawnTime() (time.Time, error) {
	if !v.IsWithdrawn() {
		return time.Time{}, nil
	}
	return time.Parse(time.RFC3339, v.Withdrawn)
}

// HasCVE 检查漏洞是否有关联的CVE编号
func (v *Vulnerability) HasCVE() bool {
	for _, alias := range v.Aliases {
		if len(alias) >= 3 && alias[:3] == "CVE" {
			return true
		}
	}
	return false
}

// GetCVEs 获取所有关联的CVE编号
func (v *Vulnerability) GetCVEs() []string {
	var cves []string
	for _, alias := range v.Aliases {
		if len(alias) >= 3 && alias[:3] == "CVE" {
			cves = append(cves, alias)
		}
	}
	return cves
}
