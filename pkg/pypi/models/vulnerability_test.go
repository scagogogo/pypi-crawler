package models

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestVulnerability_IsFixed(t *testing.T) {
	t.Run("已修复版本", func(t *testing.T) {
		vuln := &Vulnerability{
			FixedIn: []string{"1.0.1", "1.1.0", "2.0.0"},
		}

		assert.True(t, vuln.IsFixed("1.0.1"))
		assert.True(t, vuln.IsFixed("2.0.0"))
	})

	t.Run("未修复版本", func(t *testing.T) {
		vuln := &Vulnerability{
			FixedIn: []string{"1.0.1", "1.1.0", "2.0.0"},
		}

		assert.False(t, vuln.IsFixed("1.0.0"))
		assert.False(t, vuln.IsFixed("0.9.9"))
	})

	t.Run("空FixedIn列表", func(t *testing.T) {
		vuln := &Vulnerability{
			FixedIn: []string{},
		}

		assert.False(t, vuln.IsFixed("1.0.0"))
	})

	t.Run("nil FixedIn列表", func(t *testing.T) {
		vuln := &Vulnerability{
			FixedIn: nil,
		}

		assert.False(t, vuln.IsFixed("1.0.0"))
	})
}

func TestVulnerability_IsWithdrawn(t *testing.T) {
	t.Run("已撤回", func(t *testing.T) {
		vuln := &Vulnerability{
			Withdrawn: "2023-05-15T10:30:00Z",
		}

		assert.True(t, vuln.IsWithdrawn())
	})

	t.Run("未撤回", func(t *testing.T) {
		vuln := &Vulnerability{
			Withdrawn: "",
		}

		assert.False(t, vuln.IsWithdrawn())
	})
}

func TestVulnerability_GetWithdrawnTime(t *testing.T) {
	t.Run("已撤回有时间", func(t *testing.T) {
		vuln := &Vulnerability{
			Withdrawn: "2023-05-15T10:30:00Z",
		}

		withdrawnTime, err := vuln.GetWithdrawnTime()
		require.NoError(t, err)
		assert.Equal(t, 2023, withdrawnTime.Year())
		assert.Equal(t, time.May, withdrawnTime.Month())
		assert.Equal(t, 15, withdrawnTime.Day())
	})

	t.Run("未撤回", func(t *testing.T) {
		vuln := &Vulnerability{
			Withdrawn: "",
		}

		withdrawnTime, err := vuln.GetWithdrawnTime()
		require.NoError(t, err)
		assert.True(t, withdrawnTime.IsZero()) // 应该返回零值
	})

	t.Run("非法格式", func(t *testing.T) {
		vuln := &Vulnerability{
			Withdrawn: "not-a-date",
		}

		_, err := vuln.GetWithdrawnTime()
		assert.Error(t, err) // 应该返回解析错误
	})
}

func TestVulnerability_HasCVE(t *testing.T) {
	t.Run("有CVE", func(t *testing.T) {
		vuln := &Vulnerability{
			Aliases: []string{"CVE-2023-12345", "GHSA-xxxx-yyyy-zzzz"},
		}

		assert.True(t, vuln.HasCVE())
	})

	t.Run("无CVE", func(t *testing.T) {
		vuln := &Vulnerability{
			Aliases: []string{"GHSA-xxxx-yyyy-zzzz", "PVE-2023-0001"},
		}

		assert.False(t, vuln.HasCVE())
	})

	t.Run("空Aliases列表", func(t *testing.T) {
		vuln := &Vulnerability{
			Aliases: []string{},
		}

		assert.False(t, vuln.HasCVE())
	})

	t.Run("nil Aliases列表", func(t *testing.T) {
		vuln := &Vulnerability{
			Aliases: nil,
		}

		assert.False(t, vuln.HasCVE())
	})
}

func TestVulnerability_GetCVEs(t *testing.T) {
	t.Run("多个CVE", func(t *testing.T) {
		vuln := &Vulnerability{
			Aliases: []string{"CVE-2023-12345", "GHSA-xxxx-yyyy-zzzz", "CVE-2023-54321"},
		}

		cves := vuln.GetCVEs()
		assert.Len(t, cves, 2)
		assert.Contains(t, cves, "CVE-2023-12345")
		assert.Contains(t, cves, "CVE-2023-54321")
	})

	t.Run("无CVE", func(t *testing.T) {
		vuln := &Vulnerability{
			Aliases: []string{"GHSA-xxxx-yyyy-zzzz", "PVE-2023-0001"},
		}

		cves := vuln.GetCVEs()
		assert.Empty(t, cves)
	})

	t.Run("nil Aliases列表", func(t *testing.T) {
		vuln := &Vulnerability{
			Aliases: nil,
		}

		cves := vuln.GetCVEs()
		assert.Empty(t, cves)
	})
}
