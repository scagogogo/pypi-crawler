import{_ as a,c as n,o as i,ag as e}from"./chunks/framework.J5k1uz79.js";const g=JSON.parse('{"title":"GitHub Pages 设置指南","description":"","frontmatter":{},"headers":[],"relativePath":"GITHUB_PAGES_SETUP.md","filePath":"GITHUB_PAGES_SETUP.md","lastUpdated":1752667451000}'),l={name:"GITHUB_PAGES_SETUP.md"};function t(o,s,r,p,c,h){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="github-pages-设置指南" tabindex="-1">GitHub Pages 设置指南 <a class="header-anchor" href="#github-pages-设置指南" aria-label="Permalink to &quot;GitHub Pages 设置指南&quot;">​</a></h1><p>本文档说明如何为 PyPI Crawler 项目设置 GitHub Pages 文档站点。</p><h2 id="🎯-部署方式" tabindex="-1">🎯 部署方式 <a class="header-anchor" href="#🎯-部署方式" aria-label="Permalink to &quot;🎯 部署方式&quot;">​</a></h2><p>我们使用 <strong>构建后推送到 gh-pages 分支</strong> 的方式，而不是 GitHub Pages Actions。</p><h3 id="部署流程" tabindex="-1">部署流程 <a class="header-anchor" href="#部署流程" aria-label="Permalink to &quot;部署流程&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[推送到 main] --&gt; B[触发 GitHub Actions]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[安装 Node.js 依赖]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[构建 VitePress 文档]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E[推送到 gh-pages 分支]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; F[GitHub Pages 自动部署]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="🔧-设置步骤" tabindex="-1">🔧 设置步骤 <a class="header-anchor" href="#🔧-设置步骤" aria-label="Permalink to &quot;🔧 设置步骤&quot;">​</a></h2><h3 id="_1-启用-github-pages" tabindex="-1">1. 启用 GitHub Pages <a class="header-anchor" href="#_1-启用-github-pages" aria-label="Permalink to &quot;1. 启用 GitHub Pages&quot;">​</a></h3><ol><li>进入 GitHub 仓库页面</li><li>点击 <strong>Settings</strong> 标签</li><li>在左侧菜单中找到 <strong>Pages</strong></li><li>在 <strong>Source</strong> 部分选择 <strong>Deploy from a branch</strong></li><li>选择 <strong>gh-pages</strong> 分支和 <strong>/ (root)</strong> 文件夹</li><li>点击 <strong>Save</strong></li></ol><h3 id="_2-配置-github-actions-权限" tabindex="-1">2. 配置 GitHub Actions 权限 <a class="header-anchor" href="#_2-配置-github-actions-权限" aria-label="Permalink to &quot;2. 配置 GitHub Actions 权限&quot;">​</a></h3><ol><li>在仓库设置中，进入 <strong>Actions</strong> &gt; <strong>General</strong></li><li>在 <strong>Workflow permissions</strong> 部分选择： <ul><li>✅ <strong>Read and write permissions</strong></li><li>✅ <strong>Allow GitHub Actions to create and approve pull requests</strong></li></ul></li></ol><p><strong>重要</strong>: 这是必需的，因为工作流需要推送到 <code>gh-pages</code> 分支。</p><h3 id="_3-触发首次部署" tabindex="-1">3. 触发首次部署 <a class="header-anchor" href="#_3-触发首次部署" aria-label="Permalink to &quot;3. 触发首次部署&quot;">​</a></h3><p>推送任何对 <code>docs/</code> 目录的更改到 <code>main</code> 分支，或者手动触发工作流：</p><ol><li>进入 <strong>Actions</strong> 页面</li><li>选择 <strong>Deploy Documentation</strong> 工作流</li><li>点击 <strong>Run workflow</strong></li></ol><h2 id="📁-项目结构" tabindex="-1">📁 项目结构 <a class="header-anchor" href="#📁-项目结构" aria-label="Permalink to &quot;📁 项目结构&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pypi-crawler/</span></span>
<span class="line"><span>├── docs/                          # 文档源码目录</span></span>
<span class="line"><span>│   ├── package.json               # Node.js 项目配置</span></span>
<span class="line"><span>│   ├── package-lock.json          # 依赖锁定文件</span></span>
<span class="line"><span>│   ├── .vitepress/</span></span>
<span class="line"><span>│   │   ├── config.js              # VitePress 配置</span></span>
<span class="line"><span>│   │   └── dist/                  # 构建输出（自动生成）</span></span>
<span class="line"><span>│   ├── *.md                       # 文档页面</span></span>
<span class="line"><span>│   └── scripts/                   # 文档相关脚本</span></span>
<span class="line"><span>└── .github/workflows/</span></span>
<span class="line"><span>    └── docs.yml                   # 文档部署工作流</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="🚀-工作流配置" tabindex="-1">🚀 工作流配置 <a class="header-anchor" href="#🚀-工作流配置" aria-label="Permalink to &quot;🚀 工作流配置&quot;">​</a></h2><h3 id="触发条件" tabindex="-1">触发条件 <a class="header-anchor" href="#触发条件" aria-label="Permalink to &quot;触发条件&quot;">​</a></h3><ul><li>推送到 <code>main</code> 分支且 <code>docs/</code> 目录有变更</li><li>手动触发</li></ul><h3 id="构建步骤" tabindex="-1">构建步骤 <a class="header-anchor" href="#构建步骤" aria-label="Permalink to &quot;构建步骤&quot;">​</a></h3><ol><li><strong>Checkout</strong>: 检出代码</li><li><strong>Setup Node.js</strong>: 安装 Node.js 18 和 npm 缓存</li><li><strong>Install dependencies</strong>: 运行 <code>npm ci</code></li><li><strong>Build</strong>: 运行 <code>npm run docs:build</code></li><li><strong>Deploy</strong>: 推送构建产物到 <code>gh-pages</code> 分支</li></ol><h3 id="使用的-action" tabindex="-1">使用的 Action <a class="header-anchor" href="#使用的-action" aria-label="Permalink to &quot;使用的 Action&quot;">​</a></h3><ul><li><code>actions/checkout@v4</code>: 检出代码</li><li><code>actions/setup-node@v4</code>: 设置 Node.js 环境</li><li><code>peaceiris/actions-gh-pages@v3</code>: 部署到 gh-pages 分支</li></ul><h2 id="🌐-访问地址" tabindex="-1">🌐 访问地址 <a class="header-anchor" href="#🌐-访问地址" aria-label="Permalink to &quot;🌐 访问地址&quot;">​</a></h2><p>部署成功后，文档站点将在以下地址可用：</p><p><strong><a href="https://scagogogo.github.io/pypi-crawler/" target="_blank" rel="noreferrer">https://scagogogo.github.io/pypi-crawler/</a></strong></p><h2 id="🔍-故障排除" tabindex="-1">🔍 故障排除 <a class="header-anchor" href="#🔍-故障排除" aria-label="Permalink to &quot;🔍 故障排除&quot;">​</a></h2><h3 id="部署失败" tabindex="-1">部署失败 <a class="header-anchor" href="#部署失败" aria-label="Permalink to &quot;部署失败&quot;">​</a></h3><ol><li><strong>检查权限</strong>: 确保 GitHub Actions 有写入权限</li><li><strong>检查分支</strong>: 确保 <code>gh-pages</code> 分支存在且可访问</li><li><strong>查看日志</strong>: 在 Actions 页面查看详细的构建日志</li></ol><h3 id="页面不更新" tabindex="-1">页面不更新 <a class="header-anchor" href="#页面不更新" aria-label="Permalink to &quot;页面不更新&quot;">​</a></h3><ol><li><strong>清除缓存</strong>: 强制刷新浏览器缓存 (Ctrl+F5)</li><li><strong>检查分支</strong>: 确认 GitHub Pages 设置指向正确的分支</li><li><strong>等待时间</strong>: GitHub Pages 部署可能需要几分钟时间</li></ol><h3 id="构建错误" tabindex="-1">构建错误 <a class="header-anchor" href="#构建错误" aria-label="Permalink to &quot;构建错误&quot;">​</a></h3><ol><li><strong>本地测试</strong>: 运行 <code>./docs/scripts/test-docs.sh</code></li><li><strong>检查依赖</strong>: 确保 <code>package-lock.json</code> 是最新的</li><li><strong>Node.js 版本</strong>: 确保使用 Node.js 16+</li></ol><h2 id="📝-本地开发" tabindex="-1">📝 本地开发 <a class="header-anchor" href="#📝-本地开发" aria-label="Permalink to &quot;📝 本地开发&quot;">​</a></h2><h3 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./docs/scripts/setup-docs.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开发模式</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="测试构建" tabindex="-1">测试构建 <a class="header-anchor" href="#测试构建" aria-label="Permalink to &quot;测试构建&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 测试完整构建流程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./docs/scripts/test-docs.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="🔄-更新文档" tabindex="-1">🔄 更新文档 <a class="header-anchor" href="#🔄-更新文档" aria-label="Permalink to &quot;🔄 更新文档&quot;">​</a></h2><ol><li>编辑 <code>docs/</code> 目录下的 Markdown 文件</li><li>本地预览: <code>cd docs &amp;&amp; npm run docs:dev</code></li><li>提交并推送到 <code>main</code> 分支</li><li>GitHub Actions 自动构建和部署</li></ol><h2 id="💡-最佳实践" tabindex="-1">💡 最佳实践 <a class="header-anchor" href="#💡-最佳实践" aria-label="Permalink to &quot;💡 最佳实践&quot;">​</a></h2><ol><li><strong>分离关注点</strong>: Go 项目和文档项目完全分离</li><li><strong>自动化部署</strong>: 推送即部署，无需手动操作</li><li><strong>版本控制</strong>: 构建产物不进入版本控制</li><li><strong>缓存优化</strong>: 利用 npm 缓存加速构建</li><li><strong>错误处理</strong>: 完善的错误检查和日志记录</li></ol><hr><p><strong>🎉 恭喜！</strong> 您的文档站点现在已经正确配置，将自动部署到 GitHub Pages！</p>`,45)]))}const b=a(l,[["render",t]]);export{g as __pageData,b as default};
